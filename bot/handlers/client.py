from aiogram import types, Dispatcher
from bot.keyboard import kb_client
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import bot_db
import random
from dispatcher import bot, dp

from bot.keyboard.client_kb import urlkb_3, urlkb_4, urlkb_5


# for add user info to database
class FSMUserInfo(StatesGroup):
    name = State()
    vista_num = State()
    binance_id = State()


# for add buy order to database
class FSMAddUserOrder(StatesGroup):
    usdt_amount = State()
    vst_amount = State()


async def message_start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –æ–±–º–µ–Ω–Ω–∏–∫! –ß—Ç–æ–± —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ, –Ω–∞–∂–º–∏ HELP',
                         reply_markup=kb_client)


# add buy order to database
async def add_buy_order(callback: types.CallbackQuery):
    await FSMAddUserOrder.usdt_amount.set()
    await callback.message.answer('–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å USDT?')


async def add_usdt_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['order_id'] = random.randint(1000, 100000)
        data['user_id'] = message.from_user.id
        data['buy'] = 1
        data['usdt_amount'] = message.text
    await FSMAddUserOrder.next()
    await message.answer('–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å VST?')


async def add_vst_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['vst_amount'] = message.text
    await message.reply('–û–†–î–ï–† –ù–ê –ü–û–ö–£–ü–ö–£ VST –î–û–ë–ê–í–õ–ï–ù')
    await bot_db.sql_add_buy_order(state)
    await state.finish()


# show user info
async def message_wallet(message: types.Message):
    await bot_db.is_user_id_in_data(message)


# add user info to database
async def cm_start(callback: types.CallbackQuery):
    await FSMUserInfo.name.set()
    await callback.message.answer('–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')


async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_id'] = message.from_user.id
        data['name'] = message.text
    await FSMUserInfo.next()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à VST —Å—á–µ—Ç:')


async def load_vst(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['VST'] = message.text
    await FSMUserInfo.next()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Binance ID:')


async def load_binance(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['BinanceID'] = message.text
    await message.reply('–ì–æ—Ç–æ–≤–æ')
    await bot_db.sql_add_data(state)
    await bot_db.sql_read_data(message)
    await state.finish()


# inline button 'change' in wallet
async def change_data(callback: types.CallbackQuery):
    await callback.message.delete()
    await bot_db.sql_del_data(callback)
    await cm_start(callback)


# inline button 'delete' in wallet
async def del_data(callback: types.CallbackQuery):
    await bot_db.sql_del_data(callback)
    await callback.message.answer('–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã')


# button P2P
async def peer_to_peer(message: types.Message):
    await message.answer("üîÅ *Peer-to-peer –æ–±–º–µ–Ω*\n–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ VST —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É VST.",
                         parse_mode="Markdown", reply_markup=urlkb_3)


# inline button 'buy'
async def buy_vst(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–ö—É–ø–∏—Ç—å VST \n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö "
                                  "–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ", reply_markup=urlkb_4)


# inline button 'sell'
async def sell_vst(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–ü—Ä–æ–¥–∞—Ç—å VST \n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö "
                                  "–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ", reply_markup=urlkb_5)


# show all user's orders
async def read_own_orders(callback: types.CallbackQuery):
    await bot_db.sql_read_own_orders(callback)


# We catch clicking on the inline button with our own order
async def push_own_order_button(callback: types.CallbackQuery):
    await bot_db.order_push_button(callback)


def register_client_handler(dp: Dispatcher):
    dp.register_message_handler(message_start, commands=['start'])
    dp.register_message_handler(message_wallet, commands=['–ö–æ—à–µ–ª–µ–∫'])
    dp.register_callback_query_handler(cm_start, state=None, text=['add_data'])
    dp.register_message_handler(load_name, state=FSMUserInfo.name)
    dp.register_message_handler(load_vst, state=FSMUserInfo.vista_num)
    dp.register_message_handler(load_binance, state=FSMUserInfo.binance_id)
    dp.register_callback_query_handler(change_data, text=['change_data'])
    dp.register_callback_query_handler(del_data, text=['del_data'])
    dp.register_message_handler(peer_to_peer, commands=['P2P_–û–±–º–µ–Ω'])
    dp.register_callback_query_handler(buy_vst, text=['buy_vst'])
    dp.register_callback_query_handler(sell_vst, text=['sell_vst'])
    dp.register_callback_query_handler(add_buy_order, state=None, text=['add_buy_order'])
    dp.register_message_handler(add_usdt_amount, state=FSMAddUserOrder.usdt_amount)
    dp.register_message_handler(add_vst_amount, state=FSMAddUserOrder.vst_amount)
    dp.register_callback_query_handler(read_own_orders, text=['my_orders'])
    dp.register_callback_query_handler(push_own_order_button, lambda call: True)
